#+TITLE: Terraform 

* Preface

Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. 
Terraform can manage existing and popular service providers as well as custom in-house solutions.

We will be using Terraform to provision infrastructure on Azure.
This guide will cover the ins and outs of Terraform and will be a great resource for anyone looking to get started with Terraform.
We will deploy a simple web application as a Docker container on Azure.

* Table of Contents
:CONTENTS:
- [[preface][Preface]]
- [[basic-workflow][Basic Workflow]]
    - [[init][Init]]
    - [[plan][Plan]]
    - [[apply][Apply]]
    - [[destroy][Destroy]]
- [[basic-building-blocks][Basic Building Blocks]]
:END:

* Basic Workflow

The most important commands in Terraform are:
#+BEGIN_SRC
terraform init
terraform plan
terraform apply
terraform destroy
#+END_SRC

** init

The init command is used to initialize a working directory containing Terraform configuration files.
This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control.

** plan

The plan command is used to create an execution plan.
Terraform performs a refresh, unless explicitly disabled, and then determines what actions are necessary to achieve the desired state specified in the configuration files.

** apply

The apply command is used to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a terraform plan execution plan.

** destroy

The destroy command is used to destroy the Terraform-managed infrastructure.

* Basic Building Blocks

** Provider

The provider block is used to configure the named provider, in our case Azure.
The Azure provider is used to interact with the many resources supported by Azure Resource Manager (AzureRM) through its APIs.

#+BEGIN_SRC
provider "azurerm" {
  version = "=2.0.0"
  features {}
}
#+END_SRC

The version argument is used to pin the version of the Azure provider.
This is recommended to ensure that the same version of the provider is used across all team members, CI/CD systems, and environments.

The features block is used to enable and disable specific features of the provider.
In this case, we are enabling the features block which is required for Terraform 0.12 and later.

** Resource Group

The resource group is a logical container into which Azure resources are deployed and managed.
All resources must be deployed into a resource group, and a resource group may contain any number of resources.

#+BEGIN_SRC
resource "azurerm_resource_group" "rg" {
  name     = "terraform-rg"
  location = "West Europe"
}

output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "resource_group_location" {
  value = azurerm_resource_group.rg.location
}

#+END_SRC

The resource block is used to declare a resource.
In this case, we are declaring an Azure resource group.

The name argument is used to specify the name of the resource group.
This name must be unique within the subscription.

The location argument is used to specify the supported Azure location where the resource group should exist.
Changing this forces a new resource to be created.

The output block is used to expose a computed value as an output.
In this case, we are exposing the id, name, location, and tags of the resource group.

** Virtual Network

The virtual network is a representation of your own network in the cloud.






